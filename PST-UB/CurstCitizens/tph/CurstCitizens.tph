
// ============== SKARDAVNELNATE'S RESTORED CURST CITIZENS ========================

// Modification by SKARDAVNELNATE as of AIP v 20080408
// WeiDUization by Qwinn

// ======================= Longlist Documentation: ================================

// Curst Population
// 7 added characters for upper and lower Curst.

// Export CRSTFEM.CRE
// Remame CSTCPR1.CRE
// Place in override folder

// Export CRSTFEM2.CRE
// Remame CSTCPR2.CRE
// Place in override folder

// Export CRSTFEM3.CRE
// Remame CSTCPR3.CRE
// Place in override folder

// Export CRSTMAL.CRE
// Remame CSTCSER.CRE
// Place in override folder

// Export CRSTMAL2.CRE
// Remame CSTCSUS.CRE
// Place in override folder

// Export CRSTMAL3.CRE
// Remame CSTCANG.CRE
// Place in override folder

// Export CRSTMAL4.CRE
// Remame CSTCROG.CRE
// Place in override folder

// CSTCPR1.CRE
// Name StrRef: 1736
// Apparent name StrRef: 1736
// Dialog DCSTCPR1.DLG

// CSTCPR2.CRE
// Name StrRef: 1742
// Apparent name StrRef: 1742
// Dialog DCSTCPR2.DLG

// CSTCPR3.CRE
// Name StrRef: 1736
// Apparent name StrRef: 1736
// Dialog DCSTCPR3.DLG

// CSTCSER.CRE
// Dialog DCSTCSER.DLG

// CSTCSUS.CRE
// Name StrRef: 52754
// Apparent name StrRef: 52754
// Dialog DCSTCSUS.DLG

// CSTCANG.CRE
// Name StrRef: 53778
// Apparent name StrRef: 53778
// Dialog DCSTCANG.DLG

// CSTCROG.CRE
// Dialog CSTCROG.DLG


// DLTCEP
// Edit Areas
// Load Area AR0700
// Actors
// Add actor
// Creature CSTCPR2
// Refresh fields
// Position 460 1915
// Destination 460 1915
// Diection 14

// Add actor
// Creature CSTCPR1
// Refresh fields
// Position 815 945
// Destination 815 945
// Diection 12

// Add actor
// Creature CSTCSER
// Refresh fields
// Position 1010 1990
// Destination 1010 1990
// Diection 8

// Add actor
// Creature CSTCSUS
// Refresh fields
// Position 930 365
// Destination 930 365
// Diection 1

// Load external area override\AR0701.ARE
// Add actor
// Creature CSTCANG
// Refresh fields
// Position 2885 2080
// Destination 2885 2080
// Diection 2

// Add actor
// Creature CSTCPR3
// Refresh fields
// Position 2170 1705
// Destination 2170 1705
// Diection 2

// Add actor
// Creature CSTCROG
// Refresh fields
// Position 2420 2860
// Destination 2420 2860
// Diection 12

// AR0700.ARE
// Actor 65 Name Drunk Harlot
// Actor 66 Name Sharlene
// Actor 67 Name Servant
// Actor 68 Name Crazy

// AR0701.ARE
// Actor 64 Name Angry
// Actor 65 Name Harlot
// Actor 66 Name Rogue

// ==================================================================================

// The following is also in the documentation, but is taken care of in the Fixpack.

// DCSTCPR3.DLG
// Action 3, 4 GivePartyGold -> CreatePartyGold

// DCSTCROG.DLG
// State trigger 0 True -> !Global("Curst_Rogue_Paid","GLOBAL",1)
// Action 1, 3 GivePartyGold -> CreatePartyGold


// ==================================================================================

INCLUDE ~PST-UB/utils/Q_AREMacros.tph~

COPY_EXISTING ~CRSTFEM.CRE~  ~override/CSTCPR1.CRE~
  WRITE_LONG 0x8 1736 // Harlot
  WRITE_LONG 0xc 1736 // Harlot
  PATCH_IF !GAME_IS ~pstee~ BEGIN
  WRITE_ASCII 0x370 ~DCSTCPR1~ #8
  END ELSE BEGIN
  WRITE_ASCII 0x2cc ~DCSTCPR1~ #8
  END
 BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~CRSTFEM2.CRE~ ~override/CSTCPR2.CRE~
  WRITE_LONG 0x8 1742 // Drunk Harlot
  WRITE_LONG 0xc 1742 // Drunk Harlot
  PATCH_IF !GAME_IS ~pstee~ BEGIN
  WRITE_ASCII 0x370 ~DCSTCPR2~ #8
  END ELSE BEGIN
  WRITE_ASCII 0x2cc ~DCSTCPR2~ #8
  END
 BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~CRSTFEM3.CRE~ ~override/CSTCPR3.CRE~
  WRITE_LONG 0x8 1736 // Harlot
  WRITE_LONG 0xc 1736 // Harlot
  WRITE_LONG 0x1c 10  // 10 gold needed for her quest
  PATCH_IF !GAME_IS ~pstee~ BEGIN
  WRITE_ASCII 0x370 ~DCSTCPR3~ #8
  END ELSE BEGIN
  WRITE_ASCII 0x2cc ~DCSTCPR3~ #8
  END
 BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~CRSTMAL.CRE~  ~override/CSTCSER.CRE~
  PATCH_IF !GAME_IS ~pstee~ BEGIN
  WRITE_ASCII 0x370 ~DCSTCSER~ #8
  END ELSE BEGIN
  WRITE_ASCII 0x2cc ~DCSTCSER~ #8
  END
 BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~CRSTMAL2.CRE~ ~override/CSTCSUS.CRE~
  WRITE_LONG 0x8 52754 // Crazy Curst Citizen
  WRITE_LONG 0xc 52754 // Crazy Curst Citizen
  PATCH_IF !GAME_IS ~pstee~ BEGIN
  WRITE_ASCII 0x370 ~DCSTCSUS~ #8
  END ELSE BEGIN
  WRITE_ASCII 0x2cc ~DCSTCSUS~ #8
  END
 BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~CRSTMAL3.CRE~ ~override/CSTCANG.CRE~
  WRITE_LONG 0x8 53778 // Angry Curst Citizen
  WRITE_LONG 0xc 53778 // Angry Curst Citizen
  PATCH_IF !GAME_IS ~pstee~ BEGIN
  WRITE_ASCII 0x370 ~DCSTCANG~ #8
  END ELSE BEGIN
  WRITE_ASCII 0x2cc ~DCSTCANG~ #8
  END
 BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~CRSTMAL4.CRE~ ~override/CSTCROG.CRE~
  PATCH_IF !GAME_IS ~pstee~ BEGIN
  WRITE_ASCII 0x370 ~DCSTCROG~ #8
  END ELSE BEGIN
  WRITE_ASCII 0x2cc ~DCSTCROG~ #8
  END
  WRITE_LONG 0x1c 107 // Used to pay you 50 in his dialog, and some more if you choose to kill him for more
 BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~AR0700.ARE~ ~override~
  LAUNCH_PATCH_MACRO ~Q_ARE_InitVars~
  LAUNCH_PATCH_MACRO ~Q_AREAdd_InitVars~
  SET "Q_New_Actor" = 4
  LAUNCH_PATCH_MACRO ~Q_AREAdd_Process~

WRITE_ASCII ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 0))           ~Drunk Harlot~   #32 // Name
WRITE_ASCII ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 0)) + 0x80    ~CSTCPR2~        #8  // CRE
WRITE_ASCII ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 0)) + 0x48    ~DCSTCPR2~       #8  // DLG
WRITE_LONG  ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 0)) + 0x38    0xffffffff           // Unknown
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 0)) + 0x20    460                  // Pos X
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 0)) + 0x22    1915                 // Pos Y
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 0)) + 0x24    460                  // Des X
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 0)) + 0x26    1915                 // Des Y
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 0)) + 0x34    14                   // Orientation
WRITE_LONG  ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 0)) + 0x40    0x00ffffff           // Present
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 0)) + 0x28    1                    // Visible

WRITE_ASCII ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 1))           ~Sharlene~       #32 // Name
WRITE_ASCII ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 1)) + 0x80    ~CSTCPR1~        #8  // CRE
WRITE_ASCII ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 1)) + 0x48    ~DCSTCPR1~       #8  // DLG
WRITE_LONG  ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 1)) + 0x38    0xffffffff           // Unknown
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 1)) + 0x20    815                  // Pos X
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 1)) + 0x22    945                  // Pos Y
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 1)) + 0x24    815                  // Des X
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 1)) + 0x26    945                  // Des Y
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 1)) + 0x34    12                   // Orientation
WRITE_LONG  ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 1)) + 0x40    0x00ffffff           // Present
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 1)) + 0x28    1                    // Visible

WRITE_ASCII ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 2))           ~Servant~        #32 // Name
WRITE_ASCII ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 2)) + 0x80    ~CSTCSER~        #8  // CRE
WRITE_ASCII ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 2)) + 0x48    ~DCSTCSER~       #8  // DLG
WRITE_LONG  ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 2)) + 0x38    0xffffffff           // Unknown
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 2)) + 0x20    1010                 // Pos X
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 2)) + 0x22    1990                 // Pos Y
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 2)) + 0x24    1010                 // Des X
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 2)) + 0x26    1990                 // Des Y
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 2)) + 0x34    8                    // Orientation
WRITE_LONG  ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 2)) + 0x40    0x00ffffff           // Present
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 2)) + 0x28    1                    // Visible

WRITE_ASCII ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 3))           ~Crazy~ #32          // Name
WRITE_ASCII ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 3)) + 0x80    ~CSTCSUS~        #8  // CRE
WRITE_ASCII ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 3)) + 0x48    ~DCSTCSUS~       #8  // DLG
WRITE_LONG  ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 3)) + 0x38    0xffffffff           // Unknown
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 3)) + 0x20    930                  // Pos X
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 3)) + 0x22    365                  // Pos Y
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 3)) + 0x24    930                  // Des X
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 3)) + 0x26    365                  // Des Y
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 3)) + 0x34    1                    // Orientation
WRITE_LONG  ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 3)) + 0x40    0x00ffffff           // Present
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 3)) + 0x28    1                    // Visible
 BUT_ONLY_IF_IT_CHANGES


COPY_EXISTING ~AR0701.ARE~ ~override~
  LAUNCH_PATCH_MACRO ~Q_ARE_InitVars~
  LAUNCH_PATCH_MACRO ~Q_AREAdd_InitVars~
  SET "Q_New_Actor" = 3
  LAUNCH_PATCH_MACRO ~Q_AREAdd_Process~

WRITE_ASCII ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 0))           ~Angry~          #32 // Name
WRITE_ASCII ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 0)) + 0x80    ~CSTCANG~        #8  // CRE
WRITE_ASCII ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 0)) + 0x48    ~DCSTCANG~       #8  // DLG
WRITE_LONG  ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 0)) + 0x38    0xffffffff           // Unknown
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 0)) + 0x20    2885                 // Pos X
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 0)) + 0x22    2080                 // Pos Y
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 0)) + 0x24    2885                 // Des X
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 0)) + 0x26    2080                 // Des Y
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 0)) + 0x34    2                    // Orientation
WRITE_LONG  ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 0)) + 0x40    0x00ffffff           // Present
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 0)) + 0x28    1                    // Visible

WRITE_ASCII ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 1))           ~Harlot~         #32 // Name
WRITE_ASCII ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 1)) + 0x80    ~CSTCPR3~        #8  // CRE
WRITE_ASCII ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 1)) + 0x48    ~DCSTCPR3~       #8  // DLG
WRITE_LONG  ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 1)) + 0x38    0xffffffff           // Unknown
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 1)) + 0x20    2170                 // Pos X
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 1)) + 0x22    1705                 // Pos Y
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 1)) + 0x24    2170                 // Des X
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 1)) + 0x26    1705                 // Des Y
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 1)) + 0x34    2                    // Orientation
WRITE_LONG  ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 1)) + 0x40    0x00ffffff           // Present
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 1)) + 0x28    1                    // Visible

WRITE_ASCII ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 2))           ~Rogue~          #32 // Name
WRITE_ASCII ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 2)) + 0x80    ~CSTCROG~        #8  // CRE
WRITE_ASCII ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 2)) + 0x48    ~DCSTCROG~       #8  // DLG
WRITE_LONG  ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 2)) + 0x38    0xffffffff           // Unknown
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 2)) + 0x20    2420                 // Pos X
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 2)) + 0x22    2860                 // Pos Y
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 2)) + 0x24    2420                 // Des X
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 2)) + 0x26    2860                 // Des Y
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 2)) + 0x34    12                   // Orientation
WRITE_LONG  ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 2)) + 0x40    0x00ffffff           // Present
WRITE_SHORT ("Q_NewOffset_Actor" + ("Q_Siz_Actor" * 2)) + 0x28    1                    // Visible

// ==============================================================================
